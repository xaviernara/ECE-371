|arf8
clk => dflop:HardWired:flopsBlock:1:dFlop.clk
clk => dflop:HardWired:flopsBlock:2:dFlop.clk
clk => dflop:HardWired:flopsBlock:3:dFlop.clk
clk => dflop:HardWired:flopsBlock:4:dFlop.clk
clk => dflop:HardWired:flopsBlock:5:dFlop.clk
clk => dflop:HardWired:flopsBlock:6:dFlop.clk
clk => dflop:HardWired:flopsBlock:7:dFlop.clk
rst => dflop:HardWired:flopsBlock:1:dFlop.rst
rst => dflop:HardWired:flopsBlock:2:dFlop.rst
rst => dflop:HardWired:flopsBlock:3:dFlop.rst
rst => dflop:HardWired:flopsBlock:4:dFlop.rst
rst => dflop:HardWired:flopsBlock:5:dFlop.rst
rst => dflop:HardWired:flopsBlock:6:dFlop.rst
rst => dflop:HardWired:flopsBlock:7:dFlop.rst
wrEn => dec_3to8:WriteAddressBlock.en
rdAddr1[0] => mux_8to1:Read1AddressBlock.sel[0]
rdAddr1[1] => mux_8to1:Read1AddressBlock.sel[1]
rdAddr1[2] => mux_8to1:Read1AddressBlock.sel[2]
rdAddr2[0] => mux_8to1:Read2AddressBlock.sel[0]
rdAddr2[1] => mux_8to1:Read2AddressBlock.sel[1]
rdAddr2[2] => mux_8to1:Read2AddressBlock.sel[2]
wrAddr[0] => dec_3to8:WriteAddressBlock.w[0]
wrAddr[1] => dec_3to8:WriteAddressBlock.w[1]
wrAddr[2] => dec_3to8:WriteAddressBlock.w[2]
wrData[0] => dflop:HardWired:flopsBlock:1:dFlop.din[0]
wrData[0] => dflop:HardWired:flopsBlock:2:dFlop.din[0]
wrData[0] => dflop:HardWired:flopsBlock:3:dFlop.din[0]
wrData[0] => dflop:HardWired:flopsBlock:4:dFlop.din[0]
wrData[0] => dflop:HardWired:flopsBlock:5:dFlop.din[0]
wrData[0] => dflop:HardWired:flopsBlock:6:dFlop.din[0]
wrData[0] => dflop:HardWired:flopsBlock:7:dFlop.din[0]
wrData[1] => dflop:HardWired:flopsBlock:1:dFlop.din[1]
wrData[1] => dflop:HardWired:flopsBlock:2:dFlop.din[1]
wrData[1] => dflop:HardWired:flopsBlock:3:dFlop.din[1]
wrData[1] => dflop:HardWired:flopsBlock:4:dFlop.din[1]
wrData[1] => dflop:HardWired:flopsBlock:5:dFlop.din[1]
wrData[1] => dflop:HardWired:flopsBlock:6:dFlop.din[1]
wrData[1] => dflop:HardWired:flopsBlock:7:dFlop.din[1]
wrData[2] => dflop:HardWired:flopsBlock:1:dFlop.din[2]
wrData[2] => dflop:HardWired:flopsBlock:2:dFlop.din[2]
wrData[2] => dflop:HardWired:flopsBlock:3:dFlop.din[2]
wrData[2] => dflop:HardWired:flopsBlock:4:dFlop.din[2]
wrData[2] => dflop:HardWired:flopsBlock:5:dFlop.din[2]
wrData[2] => dflop:HardWired:flopsBlock:6:dFlop.din[2]
wrData[2] => dflop:HardWired:flopsBlock:7:dFlop.din[2]
wrData[3] => dflop:HardWired:flopsBlock:1:dFlop.din[3]
wrData[3] => dflop:HardWired:flopsBlock:2:dFlop.din[3]
wrData[3] => dflop:HardWired:flopsBlock:3:dFlop.din[3]
wrData[3] => dflop:HardWired:flopsBlock:4:dFlop.din[3]
wrData[3] => dflop:HardWired:flopsBlock:5:dFlop.din[3]
wrData[3] => dflop:HardWired:flopsBlock:6:dFlop.din[3]
wrData[3] => dflop:HardWired:flopsBlock:7:dFlop.din[3]
rdData1[0] <= mux_8to1:Read1AddressBlock.f[0]
rdData1[1] <= mux_8to1:Read1AddressBlock.f[1]
rdData1[2] <= mux_8to1:Read1AddressBlock.f[2]
rdData1[3] <= mux_8to1:Read1AddressBlock.f[3]
rdData2[0] <= mux_8to1:Read2AddressBlock.f[0]
rdData2[1] <= mux_8to1:Read2AddressBlock.f[1]
rdData2[2] <= mux_8to1:Read2AddressBlock.f[2]
rdData2[3] <= mux_8to1:Read2AddressBlock.f[3]


|arf8|dflop:\HardWired:flopsBlock:1:dFlop
clk => q[0]~reg0.CLK
clk => q[1]~reg0.CLK
clk => q[2]~reg0.CLK
clk => q[3]~reg0.CLK
rst => q[0]~reg0.ACLR
rst => q[1]~reg0.ACLR
rst => q[2]~reg0.ACLR
rst => q[3]~reg0.ACLR
clken => q[3]~reg0.ENA
clken => q[2]~reg0.ENA
clken => q[1]~reg0.ENA
clken => q[0]~reg0.ENA
din[0] => q[0]~reg0.DATAIN
din[1] => q[1]~reg0.DATAIN
din[2] => q[2]~reg0.DATAIN
din[3] => q[3]~reg0.DATAIN
q[0] <= q[0]~reg0.DB_MAX_OUTPUT_PORT_TYPE
q[1] <= q[1]~reg0.DB_MAX_OUTPUT_PORT_TYPE
q[2] <= q[2]~reg0.DB_MAX_OUTPUT_PORT_TYPE
q[3] <= q[3]~reg0.DB_MAX_OUTPUT_PORT_TYPE


|arf8|dflop:\HardWired:flopsBlock:2:dFlop
clk => q[0]~reg0.CLK
clk => q[1]~reg0.CLK
clk => q[2]~reg0.CLK
clk => q[3]~reg0.CLK
rst => q[0]~reg0.ACLR
rst => q[1]~reg0.ACLR
rst => q[2]~reg0.ACLR
rst => q[3]~reg0.ACLR
clken => q[3]~reg0.ENA
clken => q[2]~reg0.ENA
clken => q[1]~reg0.ENA
clken => q[0]~reg0.ENA
din[0] => q[0]~reg0.DATAIN
din[1] => q[1]~reg0.DATAIN
din[2] => q[2]~reg0.DATAIN
din[3] => q[3]~reg0.DATAIN
q[0] <= q[0]~reg0.DB_MAX_OUTPUT_PORT_TYPE
q[1] <= q[1]~reg0.DB_MAX_OUTPUT_PORT_TYPE
q[2] <= q[2]~reg0.DB_MAX_OUTPUT_PORT_TYPE
q[3] <= q[3]~reg0.DB_MAX_OUTPUT_PORT_TYPE


|arf8|dflop:\HardWired:flopsBlock:3:dFlop
clk => q[0]~reg0.CLK
clk => q[1]~reg0.CLK
clk => q[2]~reg0.CLK
clk => q[3]~reg0.CLK
rst => q[0]~reg0.ACLR
rst => q[1]~reg0.ACLR
rst => q[2]~reg0.ACLR
rst => q[3]~reg0.ACLR
clken => q[3]~reg0.ENA
clken => q[2]~reg0.ENA
clken => q[1]~reg0.ENA
clken => q[0]~reg0.ENA
din[0] => q[0]~reg0.DATAIN
din[1] => q[1]~reg0.DATAIN
din[2] => q[2]~reg0.DATAIN
din[3] => q[3]~reg0.DATAIN
q[0] <= q[0]~reg0.DB_MAX_OUTPUT_PORT_TYPE
q[1] <= q[1]~reg0.DB_MAX_OUTPUT_PORT_TYPE
q[2] <= q[2]~reg0.DB_MAX_OUTPUT_PORT_TYPE
q[3] <= q[3]~reg0.DB_MAX_OUTPUT_PORT_TYPE


|arf8|dflop:\HardWired:flopsBlock:4:dFlop
clk => q[0]~reg0.CLK
clk => q[1]~reg0.CLK
clk => q[2]~reg0.CLK
clk => q[3]~reg0.CLK
rst => q[0]~reg0.ACLR
rst => q[1]~reg0.ACLR
rst => q[2]~reg0.ACLR
rst => q[3]~reg0.ACLR
clken => q[3]~reg0.ENA
clken => q[2]~reg0.ENA
clken => q[1]~reg0.ENA
clken => q[0]~reg0.ENA
din[0] => q[0]~reg0.DATAIN
din[1] => q[1]~reg0.DATAIN
din[2] => q[2]~reg0.DATAIN
din[3] => q[3]~reg0.DATAIN
q[0] <= q[0]~reg0.DB_MAX_OUTPUT_PORT_TYPE
q[1] <= q[1]~reg0.DB_MAX_OUTPUT_PORT_TYPE
q[2] <= q[2]~reg0.DB_MAX_OUTPUT_PORT_TYPE
q[3] <= q[3]~reg0.DB_MAX_OUTPUT_PORT_TYPE


|arf8|dflop:\HardWired:flopsBlock:5:dFlop
clk => q[0]~reg0.CLK
clk => q[1]~reg0.CLK
clk => q[2]~reg0.CLK
clk => q[3]~reg0.CLK
rst => q[0]~reg0.ACLR
rst => q[1]~reg0.ACLR
rst => q[2]~reg0.ACLR
rst => q[3]~reg0.ACLR
clken => q[3]~reg0.ENA
clken => q[2]~reg0.ENA
clken => q[1]~reg0.ENA
clken => q[0]~reg0.ENA
din[0] => q[0]~reg0.DATAIN
din[1] => q[1]~reg0.DATAIN
din[2] => q[2]~reg0.DATAIN
din[3] => q[3]~reg0.DATAIN
q[0] <= q[0]~reg0.DB_MAX_OUTPUT_PORT_TYPE
q[1] <= q[1]~reg0.DB_MAX_OUTPUT_PORT_TYPE
q[2] <= q[2]~reg0.DB_MAX_OUTPUT_PORT_TYPE
q[3] <= q[3]~reg0.DB_MAX_OUTPUT_PORT_TYPE


|arf8|dflop:\HardWired:flopsBlock:6:dFlop
clk => q[0]~reg0.CLK
clk => q[1]~reg0.CLK
clk => q[2]~reg0.CLK
clk => q[3]~reg0.CLK
rst => q[0]~reg0.ACLR
rst => q[1]~reg0.ACLR
rst => q[2]~reg0.ACLR
rst => q[3]~reg0.ACLR
clken => q[3]~reg0.ENA
clken => q[2]~reg0.ENA
clken => q[1]~reg0.ENA
clken => q[0]~reg0.ENA
din[0] => q[0]~reg0.DATAIN
din[1] => q[1]~reg0.DATAIN
din[2] => q[2]~reg0.DATAIN
din[3] => q[3]~reg0.DATAIN
q[0] <= q[0]~reg0.DB_MAX_OUTPUT_PORT_TYPE
q[1] <= q[1]~reg0.DB_MAX_OUTPUT_PORT_TYPE
q[2] <= q[2]~reg0.DB_MAX_OUTPUT_PORT_TYPE
q[3] <= q[3]~reg0.DB_MAX_OUTPUT_PORT_TYPE


|arf8|dflop:\HardWired:flopsBlock:7:dFlop
clk => q[0]~reg0.CLK
clk => q[1]~reg0.CLK
clk => q[2]~reg0.CLK
clk => q[3]~reg0.CLK
rst => q[0]~reg0.ACLR
rst => q[1]~reg0.ACLR
rst => q[2]~reg0.ACLR
rst => q[3]~reg0.ACLR
clken => q[3]~reg0.ENA
clken => q[2]~reg0.ENA
clken => q[1]~reg0.ENA
clken => q[0]~reg0.ENA
din[0] => q[0]~reg0.DATAIN
din[1] => q[1]~reg0.DATAIN
din[2] => q[2]~reg0.DATAIN
din[3] => q[3]~reg0.DATAIN
q[0] <= q[0]~reg0.DB_MAX_OUTPUT_PORT_TYPE
q[1] <= q[1]~reg0.DB_MAX_OUTPUT_PORT_TYPE
q[2] <= q[2]~reg0.DB_MAX_OUTPUT_PORT_TYPE
q[3] <= q[3]~reg0.DB_MAX_OUTPUT_PORT_TYPE


|arf8|dec_3to8:WriteAddressBlock
w[0] => Mux0.IN19
w[0] => Mux1.IN19
w[0] => Mux2.IN19
w[0] => Mux3.IN19
w[0] => Mux4.IN19
w[0] => Mux5.IN19
w[0] => Mux6.IN19
w[0] => Mux7.IN19
w[1] => Mux0.IN18
w[1] => Mux1.IN18
w[1] => Mux2.IN18
w[1] => Mux3.IN18
w[1] => Mux4.IN18
w[1] => Mux5.IN18
w[1] => Mux6.IN18
w[1] => Mux7.IN18
w[2] => Mux0.IN17
w[2] => Mux1.IN17
w[2] => Mux2.IN17
w[2] => Mux3.IN17
w[2] => Mux4.IN17
w[2] => Mux5.IN17
w[2] => Mux6.IN17
w[2] => Mux7.IN17
en => Mux0.IN16
en => Mux1.IN16
en => Mux2.IN16
en => Mux3.IN16
en => Mux4.IN16
en => Mux5.IN16
en => Mux6.IN16
en => Mux7.IN16
y[0] <= Mux7.DB_MAX_OUTPUT_PORT_TYPE
y[1] <= Mux6.DB_MAX_OUTPUT_PORT_TYPE
y[2] <= Mux5.DB_MAX_OUTPUT_PORT_TYPE
y[3] <= Mux4.DB_MAX_OUTPUT_PORT_TYPE
y[4] <= Mux3.DB_MAX_OUTPUT_PORT_TYPE
y[5] <= Mux2.DB_MAX_OUTPUT_PORT_TYPE
y[6] <= Mux1.DB_MAX_OUTPUT_PORT_TYPE
y[7] <= Mux0.DB_MAX_OUTPUT_PORT_TYPE


|arf8|mux_8to1:Read1AddressBlock
w0[0] => Mux3.IN0
w0[1] => Mux2.IN0
w0[2] => Mux1.IN0
w0[3] => Mux0.IN0
w1[0] => Mux3.IN1
w1[1] => Mux2.IN1
w1[2] => Mux1.IN1
w1[3] => Mux0.IN1
w2[0] => Mux3.IN2
w2[1] => Mux2.IN2
w2[2] => Mux1.IN2
w2[3] => Mux0.IN2
w3[0] => Mux3.IN3
w3[1] => Mux2.IN3
w3[2] => Mux1.IN3
w3[3] => Mux0.IN3
w4[0] => Mux3.IN4
w4[1] => Mux2.IN4
w4[2] => Mux1.IN4
w4[3] => Mux0.IN4
w5[0] => Mux3.IN5
w5[1] => Mux2.IN5
w5[2] => Mux1.IN5
w5[3] => Mux0.IN5
w6[0] => Mux3.IN6
w6[1] => Mux2.IN6
w6[2] => Mux1.IN6
w6[3] => Mux0.IN6
w7[0] => Mux3.IN7
w7[1] => Mux2.IN7
w7[2] => Mux1.IN7
w7[3] => Mux0.IN7
sel[0] => Mux0.IN10
sel[0] => Mux1.IN10
sel[0] => Mux2.IN10
sel[0] => Mux3.IN10
sel[1] => Mux0.IN9
sel[1] => Mux1.IN9
sel[1] => Mux2.IN9
sel[1] => Mux3.IN9
sel[2] => Mux0.IN8
sel[2] => Mux1.IN8
sel[2] => Mux2.IN8
sel[2] => Mux3.IN8
f[0] <= Mux3.DB_MAX_OUTPUT_PORT_TYPE
f[1] <= Mux2.DB_MAX_OUTPUT_PORT_TYPE
f[2] <= Mux1.DB_MAX_OUTPUT_PORT_TYPE
f[3] <= Mux0.DB_MAX_OUTPUT_PORT_TYPE


|arf8|mux_8to1:Read2AddressBlock
w0[0] => Mux3.IN0
w0[1] => Mux2.IN0
w0[2] => Mux1.IN0
w0[3] => Mux0.IN0
w1[0] => Mux3.IN1
w1[1] => Mux2.IN1
w1[2] => Mux1.IN1
w1[3] => Mux0.IN1
w2[0] => Mux3.IN2
w2[1] => Mux2.IN2
w2[2] => Mux1.IN2
w2[3] => Mux0.IN2
w3[0] => Mux3.IN3
w3[1] => Mux2.IN3
w3[2] => Mux1.IN3
w3[3] => Mux0.IN3
w4[0] => Mux3.IN4
w4[1] => Mux2.IN4
w4[2] => Mux1.IN4
w4[3] => Mux0.IN4
w5[0] => Mux3.IN5
w5[1] => Mux2.IN5
w5[2] => Mux1.IN5
w5[3] => Mux0.IN5
w6[0] => Mux3.IN6
w6[1] => Mux2.IN6
w6[2] => Mux1.IN6
w6[3] => Mux0.IN6
w7[0] => Mux3.IN7
w7[1] => Mux2.IN7
w7[2] => Mux1.IN7
w7[3] => Mux0.IN7
sel[0] => Mux0.IN10
sel[0] => Mux1.IN10
sel[0] => Mux2.IN10
sel[0] => Mux3.IN10
sel[1] => Mux0.IN9
sel[1] => Mux1.IN9
sel[1] => Mux2.IN9
sel[1] => Mux3.IN9
sel[2] => Mux0.IN8
sel[2] => Mux1.IN8
sel[2] => Mux2.IN8
sel[2] => Mux3.IN8
f[0] <= Mux3.DB_MAX_OUTPUT_PORT_TYPE
f[1] <= Mux2.DB_MAX_OUTPUT_PORT_TYPE
f[2] <= Mux1.DB_MAX_OUTPUT_PORT_TYPE
f[3] <= Mux0.DB_MAX_OUTPUT_PORT_TYPE


